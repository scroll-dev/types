
        object "plonk_verifier" {
            code {
                function allocate(size) -> ptr {
                    ptr := mload(0x40)
                    if eq(ptr, 0) { ptr := 0x60 }
                    mstore(0x40, add(ptr, size))
                }
                let size := datasize("Runtime")
                let offset := allocate(size)
                datacopy(offset, dataoffset("Runtime"), size)
                return(offset, size)
            }
            object "Runtime" {
                code {
                    let success:bool := true
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    function validate_ec_point(x, y) -> valid:bool {
                        {
                            let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            valid := and(x_lt_p, y_lt_p)
                        }
                        {
                            let x_is_zero:bool := eq(x, 0)
                            let y_is_zero:bool := eq(y, 0)
                            let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                            let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                            valid := and(x_and_y_is_not_zero, valid)
                        }
                        {
                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                            valid := and(y_square_eq_x_cube_plus_3, valid)
                        }
                    }
                    mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x40, mod(calldataload(0x20), f_q))
mstore(0x60, mod(calldataload(0x40), f_q))
mstore(0x80, mod(calldataload(0x60), f_q))
mstore(0xa0, mod(calldataload(0x80), f_q))
mstore(0xc0, mod(calldataload(0xa0), f_q))
mstore(0xe0, mod(calldataload(0xc0), f_q))
mstore(0x100, mod(calldataload(0xe0), f_q))
mstore(0x120, mod(calldataload(0x100), f_q))
mstore(0x140, mod(calldataload(0x120), f_q))
mstore(0x160, mod(calldataload(0x140), f_q))
mstore(0x180, mod(calldataload(0x160), f_q))
mstore(0x1a0, mod(calldataload(0x180), f_q))
mstore(0x1c0, mod(calldataload(0x1a0), f_q))
mstore(0x1e0, mod(calldataload(0x1c0), f_q))
mstore(0x200, mod(calldataload(0x1e0), f_q))
mstore(0x220, mod(calldataload(0x200), f_q))
mstore(0x240, mod(calldataload(0x220), f_q))
mstore(0x260, mod(calldataload(0x240), f_q))
mstore(0x280, mod(calldataload(0x260), f_q))
mstore(0x2a0, mod(calldataload(0x280), f_q))
mstore(0x2c0, mod(calldataload(0x2a0), f_q))
mstore(0x2e0, mod(calldataload(0x2c0), f_q))
mstore(0x300, mod(calldataload(0x2e0), f_q))
mstore(0x320, mod(calldataload(0x300), f_q))
mstore(0x340, mod(calldataload(0x320), f_q))
mstore(0x360, mod(calldataload(0x340), f_q))
mstore(0x380, mod(calldataload(0x360), f_q))
mstore(0x3a0, mod(calldataload(0x380), f_q))
mstore(0x3c0, mod(calldataload(0x3a0), f_q))
mstore(0x3e0, mod(calldataload(0x3c0), f_q))
mstore(0x400, mod(calldataload(0x3e0), f_q))
mstore(0x420, mod(calldataload(0x400), f_q))
mstore(0x440, mod(calldataload(0x420), f_q))
mstore(0x460, mod(calldataload(0x440), f_q))
mstore(0x480, mod(calldataload(0x460), f_q))
mstore(0x4a0, mod(calldataload(0x480), f_q))
mstore(0x4c0, mod(calldataload(0x4a0), f_q))
mstore(0x4e0, mod(calldataload(0x4c0), f_q))
mstore(0x500, mod(calldataload(0x4e0), f_q))
mstore(0x520, mod(calldataload(0x500), f_q))
mstore(0x540, mod(calldataload(0x520), f_q))
mstore(0x560, mod(calldataload(0x540), f_q))
mstore(0x580, mod(calldataload(0x560), f_q))
mstore(0x0, 10981534524472451508476807576826493245306202101841318373922236441225845909808)

        {
            let x := calldataload(0x580)
            mstore(0x5a0, x)
            let y := calldataload(0x5a0)
            mstore(0x5c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x5c0)
            mstore(0x5e0, x)
            let y := calldataload(0x5e0)
            mstore(0x600, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x600)
            mstore(0x620, x)
            let y := calldataload(0x620)
            mstore(0x640, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x660, keccak256(0x0, 1632))
{
            let hash := mload(0x660)
            mstore(0x680, mod(hash, f_q))
            mstore(0x6a0, hash)
        }

        {
            let x := calldataload(0x640)
            mstore(0x6c0, x)
            let y := calldataload(0x660)
            mstore(0x6e0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x700, keccak256(0x6a0, 96))
{
            let hash := mload(0x700)
            mstore(0x720, mod(hash, f_q))
            mstore(0x740, hash)
        }
mstore8(1888, 1)
mstore(0x760, keccak256(0x740, 33))
{
            let hash := mload(0x760)
            mstore(0x780, mod(hash, f_q))
            mstore(0x7a0, hash)
        }

        {
            let x := calldataload(0x680)
            mstore(0x7c0, x)
            let y := calldataload(0x6a0)
            mstore(0x7e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x6c0)
            mstore(0x800, x)
            let y := calldataload(0x6e0)
            mstore(0x820, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x700)
            mstore(0x840, x)
            let y := calldataload(0x720)
            mstore(0x860, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x740)
            mstore(0x880, x)
            let y := calldataload(0x760)
            mstore(0x8a0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x8c0, keccak256(0x7a0, 288))
{
            let hash := mload(0x8c0)
            mstore(0x8e0, mod(hash, f_q))
            mstore(0x900, hash)
        }

        {
            let x := calldataload(0x780)
            mstore(0x920, x)
            let y := calldataload(0x7a0)
            mstore(0x940, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x7c0)
            mstore(0x960, x)
            let y := calldataload(0x7e0)
            mstore(0x980, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x800)
            mstore(0x9a0, x)
            let y := calldataload(0x820)
            mstore(0x9c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x840)
            mstore(0x9e0, x)
            let y := calldataload(0x860)
            mstore(0xa00, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xa20, keccak256(0x900, 288))
{
            let hash := mload(0xa20)
            mstore(0xa40, mod(hash, f_q))
            mstore(0xa60, hash)
        }
mstore(0xa80, mod(calldataload(0x880), f_q))
mstore(0xaa0, mod(calldataload(0x8a0), f_q))
mstore(0xac0, mod(calldataload(0x8c0), f_q))
mstore(0xae0, mod(calldataload(0x8e0), f_q))
mstore(0xb00, mod(calldataload(0x900), f_q))
mstore(0xb20, mod(calldataload(0x920), f_q))
mstore(0xb40, mod(calldataload(0x940), f_q))
mstore(0xb60, mod(calldataload(0x960), f_q))
mstore(0xb80, mod(calldataload(0x980), f_q))
mstore(0xba0, mod(calldataload(0x9a0), f_q))
mstore(0xbc0, mod(calldataload(0x9c0), f_q))
mstore(0xbe0, mod(calldataload(0x9e0), f_q))
mstore(0xc00, mod(calldataload(0xa00), f_q))
mstore(0xc20, mod(calldataload(0xa20), f_q))
mstore(0xc40, mod(calldataload(0xa40), f_q))
mstore(0xc60, mod(calldataload(0xa60), f_q))
mstore(0xc80, mod(calldataload(0xa80), f_q))
mstore(0xca0, mod(calldataload(0xaa0), f_q))
mstore(0xcc0, mod(calldataload(0xac0), f_q))
mstore(0xce0, mod(calldataload(0xae0), f_q))
mstore(0xd00, mod(calldataload(0xb00), f_q))
mstore(0xd20, mod(calldataload(0xb20), f_q))
mstore(0xd40, mod(calldataload(0xb40), f_q))
mstore(0xd60, mod(calldataload(0xb60), f_q))
mstore(0xd80, mod(calldataload(0xb80), f_q))
mstore(0xda0, mod(calldataload(0xba0), f_q))
mstore(0xdc0, mod(calldataload(0xbc0), f_q))
mstore(0xde0, keccak256(0xa60, 896))
{
            let hash := mload(0xde0)
            mstore(0xe00, mod(hash, f_q))
            mstore(0xe20, hash)
        }
mstore8(3648, 1)
mstore(0xe40, keccak256(0xe20, 33))
{
            let hash := mload(0xe40)
            mstore(0xe60, mod(hash, f_q))
            mstore(0xe80, hash)
        }

        {
            let x := calldataload(0xbe0)
            mstore(0xea0, x)
            let y := calldataload(0xc00)
            mstore(0xec0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xee0, keccak256(0xe80, 96))
{
            let hash := mload(0xee0)
            mstore(0xf00, mod(hash, f_q))
            mstore(0xf20, hash)
        }

        {
            let x := calldataload(0xc20)
            mstore(0xf40, x)
            let y := calldataload(0xc40)
            mstore(0xf60, y)
            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0x20)
x := add(x, shl(88, mload(0x40)))
x := add(x, shl(176, mload(0x60)))
mstore(3968, x)
let y := mload(0x80)
y := add(y, shl(88, mload(0xa0)))
y := add(y, shl(176, mload(0xc0)))
mstore(4000, y)

            success := and(validate_ec_point(x, y), success)
        }
{
            let x := mload(0xe0)
x := add(x, shl(88, mload(0x100)))
x := add(x, shl(176, mload(0x120)))
mstore(4032, x)
let y := mload(0x140)
y := add(y, shl(88, mload(0x160)))
y := add(y, shl(176, mload(0x180)))
mstore(4064, y)

            success := and(validate_ec_point(x, y), success)
        }
mstore(0x1000, mulmod(mload(0xa40), mload(0xa40), f_q))
mstore(0x1020, mulmod(mload(0x1000), mload(0x1000), f_q))
mstore(0x1040, mulmod(mload(0x1020), mload(0x1020), f_q))
mstore(0x1060, mulmod(mload(0x1040), mload(0x1040), f_q))
mstore(0x1080, mulmod(mload(0x1060), mload(0x1060), f_q))
mstore(0x10a0, mulmod(mload(0x1080), mload(0x1080), f_q))
mstore(0x10c0, mulmod(mload(0x10a0), mload(0x10a0), f_q))
mstore(0x10e0, mulmod(mload(0x10c0), mload(0x10c0), f_q))
mstore(0x1100, mulmod(mload(0x10e0), mload(0x10e0), f_q))
mstore(0x1120, mulmod(mload(0x1100), mload(0x1100), f_q))
mstore(0x1140, mulmod(mload(0x1120), mload(0x1120), f_q))
mstore(0x1160, mulmod(mload(0x1140), mload(0x1140), f_q))
mstore(0x1180, mulmod(mload(0x1160), mload(0x1160), f_q))
mstore(0x11a0, mulmod(mload(0x1180), mload(0x1180), f_q))
mstore(0x11c0, mulmod(mload(0x11a0), mload(0x11a0), f_q))
mstore(0x11e0, mulmod(mload(0x11c0), mload(0x11c0), f_q))
mstore(0x1200, mulmod(mload(0x11e0), mload(0x11e0), f_q))
mstore(0x1220, mulmod(mload(0x1200), mload(0x1200), f_q))
mstore(0x1240, mulmod(mload(0x1220), mload(0x1220), f_q))
mstore(0x1260, mulmod(mload(0x1240), mload(0x1240), f_q))
mstore(0x1280, mulmod(mload(0x1260), mload(0x1260), f_q))
mstore(0x12a0, mulmod(mload(0x1280), mload(0x1280), f_q))
mstore(0x12c0, mulmod(mload(0x12a0), mload(0x12a0), f_q))
mstore(0x12e0, mulmod(mload(0x12c0), mload(0x12c0), f_q))
mstore(0x1300, mulmod(mload(0x12e0), mload(0x12e0), f_q))
mstore(0x1320, mulmod(mload(0x1300), mload(0x1300), f_q))
mstore(0x1340, addmod(mload(0x1320), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x1360, mulmod(mload(0x1340), 21888242545679039938882419398440172875981108180010270949818755658014750055173, f_q))
mstore(0x1380, mulmod(mload(0x1360), 20399963857427891121373969697480515951916080097087921832172879765607926713957, f_q))
mstore(0x13a0, addmod(mload(0xa40), 1488279014411384100872436047776759136632284303328112511525324420967881781660, f_q))
mstore(0x13c0, mulmod(mload(0x1360), 16569469942529664681363945218228869388192121720036659574609237682362097667612, f_q))
mstore(0x13e0, addmod(mload(0xa40), 5318772929309610540882460527028405700356242680379374769088966504213710828005, f_q))
mstore(0x1400, mulmod(mload(0x1360), 6047398202650739717314770882059679662647667807426525133977681644606291529311, f_q))
mstore(0x1420, addmod(mload(0xa40), 15840844669188535504931634863197595425900696592989509209720522541969516966306, f_q))
mstore(0x1440, mulmod(mload(0x1360), 17329448237240114492580865744088056414251735686965494637158808787419781175510, f_q))
mstore(0x1460, addmod(mload(0xa40), 4558794634599160729665540001169218674296628713450539706539395399156027320107, f_q))
mstore(0x1480, mulmod(mload(0x1360), 3693565015985198455139889557180396682968596245011005461846595820698933079918, f_q))
mstore(0x14a0, addmod(mload(0xa40), 18194677855854076767106516188076878405579768155405028881851608365876875415699, f_q))
mstore(0x14c0, mulmod(mload(0x1360), 11377606117859914088982205826922132024839443553408109299929510653283289974216, f_q))
mstore(0x14e0, addmod(mload(0xa40), 10510636753979361133264199918335143063708920847007925043768693533292518521401, f_q))
mstore(0x1500, mulmod(mload(0x1360), 14803907026430593724305438564799066516271154714737734572920456128449769927233, f_q))
mstore(0x1520, addmod(mload(0xa40), 7084335845408681497940967180458208572277209685678299770777748058126038568384, f_q))
mstore(0x1540, mulmod(mload(0x1360), 1, f_q))
mstore(0x1560, addmod(mload(0xa40), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x1580, mulmod(mload(0x1360), 13446667982376394161563610564587413125564757801019538732601045199901075958935, f_q))
mstore(0x15a0, addmod(mload(0xa40), 8441574889462881060682795180669861962983606599396495611097158986674732536682, f_q))
mstore(0x15c0, mulmod(mload(0x1360), 6143038923529407703646399695489445107254060255791852207908457597807435305312, f_q))
mstore(0x15e0, addmod(mload(0xa40), 15745203948309867518600006049767829981294304144624182135789746588768373190305, f_q))
mstore(0x1600, mulmod(mload(0x1360), 21813856626197829021720820945327074612555900476153638460378780375714815148448, f_q))
mstore(0x1620, addmod(mload(0xa40), 74386245641446200525584799930200475992463924262395883319423810860993347169, f_q))
mstore(0x1640, mulmod(mload(0x1360), 11451405578697956743456240853980216273390554734748796433026540431386972584651, f_q))
mstore(0x1660, addmod(mload(0xa40), 10436837293141318478790164891277058815157809665667237910671663755188835910966, f_q))
mstore(0x1680, mulmod(mload(0x1360), 2258791456229719674664876333845584462457126852136701862196747426485314788465, f_q))
mstore(0x16a0, addmod(mload(0xa40), 19629451415609555547581529411411690626091237548279332481501456760090493707152, f_q))
mstore(0x16c0, mulmod(mload(0x1360), 16670521521732547392407716560529197273408943645332907966320731856743274895475, f_q))
mstore(0x16e0, addmod(mload(0xa40), 5217721350106727829838689184728077815139420755083126377377472329832533600142, f_q))
mstore(0x1700, mulmod(mload(0x1360), 6973717477794544023251421539913937529504002186168239878624319939785647341572, f_q))
mstore(0x1720, addmod(mload(0xa40), 14914525394044731198994984205343337559044362214247794465073884246790161154045, f_q))
mstore(0x1740, mulmod(mload(0x1360), 8374374965308410102411073611984011876711565317741801500439755773472076597347, f_q))
mstore(0x1760, addmod(mload(0xa40), 13513867906530865119835332133273263211836799082674232843258448413103731898270, f_q))
mstore(0x1780, mulmod(mload(0x1360), 7644774028564064345188091774880429238758499926703297575879018755827411518744, f_q))
mstore(0x17a0, addmod(mload(0xa40), 14243468843275210877058313970376845849789864473712736767819185430748396976873, f_q))
mstore(0x17c0, mulmod(mload(0x1360), 17041886618628883845743410343041491135676788197442345444346654338941897766515, f_q))
mstore(0x17e0, addmod(mload(0xa40), 4846356253210391376502995402215783952871576202973688899351549847633910729102, f_q))
mstore(0x1800, mulmod(mload(0x1360), 20276212859876996965895067376549928325970197996069741985761123463478912375212, f_q))
mstore(0x1820, addmod(mload(0xa40), 1612030011962278256351338368707346762578166404346292357937080723096896120405, f_q))
mstore(0x1840, mulmod(mload(0x1360), 21490807004895109926141140246143262403290679459142140821740925192625185504522, f_q))
mstore(0x1860, addmod(mload(0xa40), 397435866944165296105265499114012685257684941273893521957278993950622991095, f_q))
mstore(0x1880, mulmod(mload(0x1360), 21856635360464150734248258901271514898436182748160009166613717095391832219001, f_q))
mstore(0x18a0, addmod(mload(0xa40), 31607511375124487998146843985760190112181652256025177084487091183976276616, f_q))
mstore(0x18c0, mulmod(mload(0x1360), 4947689244094276630090796471410438387704819356682144196760515917874272844658, f_q))
mstore(0x18e0, addmod(mload(0xa40), 16940553627744998592155609273846836700843545043733890146937688268701535650959, f_q))
mstore(0x1900, mulmod(mload(0x1360), 16070949257099864401214446952969046546611226673215562325034009111680440277863, f_q))
mstore(0x1920, addmod(mload(0xa40), 5817293614739410821031958792288228541937137727200472018664195074895368217754, f_q))
mstore(0x1940, mulmod(mload(0x1360), 11211301017135681023579411905410872569206244553457844956874280139879520583390, f_q))
mstore(0x1960, addmod(mload(0xa40), 10676941854703594198666993839846402519342119846958189386823924046696287912227, f_q))
mstore(0x1980, mulmod(mload(0x1360), 13950560640343059709470007801605358008980413716864447750775614801472024994001, f_q))
mstore(0x19a0, addmod(mload(0xa40), 7937682231496215512776397943651917079567950683551586592922589385103783501616, f_q))
mstore(0x19c0, mulmod(mload(0x1360), 5264024894212359361117235356180248560912605977787414341366976252256241723081, f_q))
mstore(0x19e0, addmod(mload(0xa40), 16624217977626915861129170389077026527635758422628620002331227934319566772536, f_q))
mstore(0x1a00, mulmod(mload(0x1360), 3625492050666108396704456638133783157286349416935200203472288366641355665864, f_q))
mstore(0x1a20, addmod(mload(0xa40), 18262750821173166825541949107123491931262014983480834140225915819934452829753, f_q))
mstore(0x1a40, mulmod(mload(0x1360), 18846108080730935585192484934247867403156699586319724728525857970312957475341, f_q))
mstore(0x1a60, addmod(mload(0xa40), 3042134791108339637053920811009407685391664814096309615172346216262851020276, f_q))
mstore(0x1a80, mulmod(mload(0x1360), 6473332732845625289791651727472817517565982136597666101608581856093617811346, f_q))
mstore(0x1aa0, addmod(mload(0xa40), 15414910138993649932454754017784457570982382263818368242089622330482190684271, f_q))
mstore(0x1ac0, mulmod(mload(0x1360), 14702679338564370535199761954906750181917994561807919001424434650417511039135, f_q))
mstore(0x1ae0, addmod(mload(0xa40), 7185563533274904687046643790350524906630369838608115342273769536158297456482, f_q))
mstore(0x1b00, mulmod(mload(0x1360), 6001486148891510551408340246911394095022311837824516338589673764885721480362, f_q))
mstore(0x1b20, addmod(mload(0xa40), 15886756722947764670838065498345880993526052562591518005108530421690087015255, f_q))
mstore(0x1b40, mulmod(mload(0x1360), 3615478808282855240548287271348143516886772452944084747768312988864436725401, f_q))
mstore(0x1b60, addmod(mload(0xa40), 18272764063556419981698118473909131571661591947471949595929891197711371770216, f_q))
mstore(0x1b80, mulmod(mload(0x1360), 20071829179313733810514054731149563060078898520308036156454560925907634177933, f_q))
mstore(0x1ba0, addmod(mload(0xa40), 1816413692525541411732351014107712028469465880107998187243643260668174317684, f_q))
mstore(0x1bc0, mulmod(mload(0x1360), 20616120149426804763291284446254360562902600427757250597073510835143294097149, f_q))
mstore(0x1be0, addmod(mload(0xa40), 1272122722412470458955121299002914525645763972658783746624693351432514398468, f_q))
mstore(0x1c00, mulmod(mload(0x1360), 3585551075125575742055255832303269867955814610482605714026762524714908083900, f_q))
mstore(0x1c20, addmod(mload(0xa40), 18302691796713699480191149912954005220592549789933428629671441661860900411717, f_q))
mstore(0x1c40, mulmod(mload(0x1360), 21451937155080765789602997556105366785934335730087568134349216848800867145453, f_q))
mstore(0x1c60, addmod(mload(0xa40), 436305716758509432643408189151908302614028670328466209348987337774941350164, f_q))
mstore(0x1c80, mulmod(mload(0x1360), 4070243721850300726896938189086547214968137391119166530614875006516826752418, f_q))
mstore(0x1ca0, addmod(mload(0xa40), 17817999149988974495349467556170727873580227009296867813083329180058981743199, f_q))
mstore(0x1cc0, mulmod(mload(0x1360), 19017161409611545481649028523508330517390470146558499215911270929711753577772, f_q))
mstore(0x1ce0, addmod(mload(0xa40), 2871081462227729740597377221748944571157894253857535127786933256864054917845, f_q))
mstore(0x1d00, mulmod(mload(0x1360), 12549780828132855382653724571165152641343199387266483482107252711345531892205, f_q))
mstore(0x1d20, addmod(mload(0xa40), 9338462043706419839592681174092122447205165013149550861590951475230276603412, f_q))
mstore(0x1d40, mulmod(mload(0x1360), 1426404432721484388505361748317961535523355871255605456897797744433766488507, f_q))
mstore(0x1d60, addmod(mload(0xa40), 20461838439117790833741043996939313553025008529160428886800406442142042007110, f_q))
mstore(0x1d80, mulmod(mload(0x1360), 2860590480336939970006578605102180232264799008100082260804221829354337294287, f_q))
mstore(0x1da0, addmod(mload(0xa40), 19027652391502335252239827140155094856283565392315952082893982357221471201330, f_q))
mstore(0x1dc0, mulmod(mload(0x1360), 10856460699172062612938276947444161095149765964986006640875349177781443506948, f_q))
mstore(0x1de0, addmod(mload(0xa40), 11031782172667212609308128797813113993398598435430027702822855008794364988669, f_q))
mstore(0x1e00, mulmod(mload(0x1360), 19467265833364185214045793258450546138634683659425890747115642462603735083442, f_q))
mstore(0x1e20, addmod(mload(0xa40), 2420977038475090008200612486806728949913680740990143596582561723972073412175, f_q))
mstore(0x1e40, mulmod(mload(0x1360), 13982290267294411190096162596630216412723378687553046594730793425118513274800, f_q))
mstore(0x1e60, addmod(mload(0xa40), 7905952604544864032150243148627058675824985712862987748967410761457295220817, f_q))
mstore(0x1e80, mulmod(mload(0x1360), 12213683769626273903767374178238853506471875322040084658829204517534489993359, f_q))
mstore(0x1ea0, addmod(mload(0xa40), 9674559102213001318479031567018421582076489078375949684868999669041318502258, f_q))
mstore(0x1ec0, mulmod(mload(0x1360), 6561173800290098519452899326025724923999000100011249967503610931251216538972, f_q))
mstore(0x1ee0, addmod(mload(0xa40), 15327069071549176702793506419231550164549364300404784376194593255324591956645, f_q))
mstore(0x1f00, mulmod(mload(0x1360), 11845175450161521233875341873694472898609044870491311030419491842578971315724, f_q))
mstore(0x1f20, addmod(mload(0xa40), 10043067421677753988371063871562802189939319529924723313278712343996837179893, f_q))
mstore(0x1f40, mulmod(mload(0x1360), 216092043779272773661818549620449970334216366264741118684015851799902419467, f_q))
mstore(0x1f60, addmod(mload(0xa40), 21672150828060002448584587195636825118214148034151293225014188334775906076150, f_q))
mstore(0x1f80, mulmod(mload(0x1360), 19719280552905736155880070309486062348736068328448776939765607276390483740201, f_q))
mstore(0x1fa0, addmod(mload(0xa40), 2168962318933539066366335435771212739812296071967257403932596910185324755416, f_q))
mstore(0x1fc0, mulmod(mload(0x1360), 8339897343549661683735240707424456381152000284494796404206060322637347081841, f_q))
mstore(0x1fe0, addmod(mload(0xa40), 13548345528289613538511165037832818707396364115921237939492143863938461413776, f_q))
mstore(0x2000, mulmod(mload(0x1360), 21385709922238337749237597265835729332575776793585401405448946415469773504064, f_q))
mstore(0x2020, addmod(mload(0xa40), 502532949600937473008808479421545755972587606830632938249257771106034991553, f_q))
{
            let prod := mload(0x13a0)

                prod := mulmod(mload(0x13e0), prod, f_q)
                mstore(0x2040, prod)
            
                prod := mulmod(mload(0x1420), prod, f_q)
                mstore(0x2060, prod)
            
                prod := mulmod(mload(0x1460), prod, f_q)
                mstore(0x2080, prod)
            
                prod := mulmod(mload(0x14a0), prod, f_q)
                mstore(0x20a0, prod)
            
                prod := mulmod(mload(0x14e0), prod, f_q)
                mstore(0x20c0, prod)
            
                prod := mulmod(mload(0x1520), prod, f_q)
                mstore(0x20e0, prod)
            
                prod := mulmod(mload(0x1560), prod, f_q)
                mstore(0x2100, prod)
            
                prod := mulmod(mload(0x15a0), prod, f_q)
                mstore(0x2120, prod)
            
                prod := mulmod(mload(0x15e0), prod, f_q)
                mstore(0x2140, prod)
            
                prod := mulmod(mload(0x1620), prod, f_q)
                mstore(0x2160, prod)
            
                prod := mulmod(mload(0x1660), prod, f_q)
                mstore(0x2180, prod)
            
                prod := mulmod(mload(0x16a0), prod, f_q)
                mstore(0x21a0, prod)
            
                prod := mulmod(mload(0x16e0), prod, f_q)
                mstore(0x21c0, prod)
            
                prod := mulmod(mload(0x1720), prod, f_q)
                mstore(0x21e0, prod)
            
                prod := mulmod(mload(0x1760), prod, f_q)
                mstore(0x2200, prod)
            
                prod := mulmod(mload(0x17a0), prod, f_q)
                mstore(0x2220, prod)
            
                prod := mulmod(mload(0x17e0), prod, f_q)
                mstore(0x2240, prod)
            
                prod := mulmod(mload(0x1820), prod, f_q)
                mstore(0x2260, prod)
            
                prod := mulmod(mload(0x1860), prod, f_q)
                mstore(0x2280, prod)
            
                prod := mulmod(mload(0x18a0), prod, f_q)
                mstore(0x22a0, prod)
            
                prod := mulmod(mload(0x18e0), prod, f_q)
                mstore(0x22c0, prod)
            
                prod := mulmod(mload(0x1920), prod, f_q)
                mstore(0x22e0, prod)
            
                prod := mulmod(mload(0x1960), prod, f_q)
                mstore(0x2300, prod)
            
                prod := mulmod(mload(0x19a0), prod, f_q)
                mstore(0x2320, prod)
            
                prod := mulmod(mload(0x19e0), prod, f_q)
                mstore(0x2340, prod)
            
                prod := mulmod(mload(0x1a20), prod, f_q)
                mstore(0x2360, prod)
            
                prod := mulmod(mload(0x1a60), prod, f_q)
                mstore(0x2380, prod)
            
                prod := mulmod(mload(0x1aa0), prod, f_q)
                mstore(0x23a0, prod)
            
                prod := mulmod(mload(0x1ae0), prod, f_q)
                mstore(0x23c0, prod)
            
                prod := mulmod(mload(0x1b20), prod, f_q)
                mstore(0x23e0, prod)
            
                prod := mulmod(mload(0x1b60), prod, f_q)
                mstore(0x2400, prod)
            
                prod := mulmod(mload(0x1ba0), prod, f_q)
                mstore(0x2420, prod)
            
                prod := mulmod(mload(0x1be0), prod, f_q)
                mstore(0x2440, prod)
            
                prod := mulmod(mload(0x1c20), prod, f_q)
                mstore(0x2460, prod)
            
                prod := mulmod(mload(0x1c60), prod, f_q)
                mstore(0x2480, prod)
            
                prod := mulmod(mload(0x1ca0), prod, f_q)
                mstore(0x24a0, prod)
            
                prod := mulmod(mload(0x1ce0), prod, f_q)
                mstore(0x24c0, prod)
            
                prod := mulmod(mload(0x1d20), prod, f_q)
                mstore(0x24e0, prod)
            
                prod := mulmod(mload(0x1d60), prod, f_q)
                mstore(0x2500, prod)
            
                prod := mulmod(mload(0x1da0), prod, f_q)
                mstore(0x2520, prod)
            
                prod := mulmod(mload(0x1de0), prod, f_q)
                mstore(0x2540, prod)
            
                prod := mulmod(mload(0x1e20), prod, f_q)
                mstore(0x2560, prod)
            
                prod := mulmod(mload(0x1e60), prod, f_q)
                mstore(0x2580, prod)
            
                prod := mulmod(mload(0x1ea0), prod, f_q)
                mstore(0x25a0, prod)
            
                prod := mulmod(mload(0x1ee0), prod, f_q)
                mstore(0x25c0, prod)
            
                prod := mulmod(mload(0x1f20), prod, f_q)
                mstore(0x25e0, prod)
            
                prod := mulmod(mload(0x1f60), prod, f_q)
                mstore(0x2600, prod)
            
                prod := mulmod(mload(0x1fa0), prod, f_q)
                mstore(0x2620, prod)
            
                prod := mulmod(mload(0x1fe0), prod, f_q)
                mstore(0x2640, prod)
            
                prod := mulmod(mload(0x2020), prod, f_q)
                mstore(0x2660, prod)
            
                prod := mulmod(mload(0x1340), prod, f_q)
                mstore(0x2680, prod)
            
        }
mstore(0x26c0, 32)
mstore(0x26e0, 32)
mstore(0x2700, 32)
mstore(0x2720, mload(0x2680))
mstore(0x2740, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x2760, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x26c0, 0xc0, 0x26a0, 0x20), 1), success)
{
            
            let inv := mload(0x26a0)
            let v
        
                    v := mload(0x1340)
                    mstore(4928, mulmod(mload(0x2660), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x2020)
                    mstore(8224, mulmod(mload(0x2640), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1fe0)
                    mstore(8160, mulmod(mload(0x2620), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1fa0)
                    mstore(8096, mulmod(mload(0x2600), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1f60)
                    mstore(8032, mulmod(mload(0x25e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1f20)
                    mstore(7968, mulmod(mload(0x25c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ee0)
                    mstore(7904, mulmod(mload(0x25a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ea0)
                    mstore(7840, mulmod(mload(0x2580), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1e60)
                    mstore(7776, mulmod(mload(0x2560), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1e20)
                    mstore(7712, mulmod(mload(0x2540), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1de0)
                    mstore(7648, mulmod(mload(0x2520), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1da0)
                    mstore(7584, mulmod(mload(0x2500), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1d60)
                    mstore(7520, mulmod(mload(0x24e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1d20)
                    mstore(7456, mulmod(mload(0x24c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ce0)
                    mstore(7392, mulmod(mload(0x24a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ca0)
                    mstore(7328, mulmod(mload(0x2480), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1c60)
                    mstore(7264, mulmod(mload(0x2460), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1c20)
                    mstore(7200, mulmod(mload(0x2440), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1be0)
                    mstore(7136, mulmod(mload(0x2420), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ba0)
                    mstore(7072, mulmod(mload(0x2400), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1b60)
                    mstore(7008, mulmod(mload(0x23e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1b20)
                    mstore(6944, mulmod(mload(0x23c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1ae0)
                    mstore(6880, mulmod(mload(0x23a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1aa0)
                    mstore(6816, mulmod(mload(0x2380), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1a60)
                    mstore(6752, mulmod(mload(0x2360), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1a20)
                    mstore(6688, mulmod(mload(0x2340), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x19e0)
                    mstore(6624, mulmod(mload(0x2320), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x19a0)
                    mstore(6560, mulmod(mload(0x2300), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1960)
                    mstore(6496, mulmod(mload(0x22e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1920)
                    mstore(6432, mulmod(mload(0x22c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x18e0)
                    mstore(6368, mulmod(mload(0x22a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x18a0)
                    mstore(6304, mulmod(mload(0x2280), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1860)
                    mstore(6240, mulmod(mload(0x2260), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1820)
                    mstore(6176, mulmod(mload(0x2240), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x17e0)
                    mstore(6112, mulmod(mload(0x2220), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x17a0)
                    mstore(6048, mulmod(mload(0x2200), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1760)
                    mstore(5984, mulmod(mload(0x21e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1720)
                    mstore(5920, mulmod(mload(0x21c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x16e0)
                    mstore(5856, mulmod(mload(0x21a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x16a0)
                    mstore(5792, mulmod(mload(0x2180), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1660)
                    mstore(5728, mulmod(mload(0x2160), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1620)
                    mstore(5664, mulmod(mload(0x2140), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x15e0)
                    mstore(5600, mulmod(mload(0x2120), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x15a0)
                    mstore(5536, mulmod(mload(0x2100), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1560)
                    mstore(5472, mulmod(mload(0x20e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1520)
                    mstore(5408, mulmod(mload(0x20c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x14e0)
                    mstore(5344, mulmod(mload(0x20a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x14a0)
                    mstore(5280, mulmod(mload(0x2080), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1460)
                    mstore(5216, mulmod(mload(0x2060), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1420)
                    mstore(5152, mulmod(mload(0x2040), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x13e0)
                    mstore(5088, mulmod(mload(0x13a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x13a0, inv)

        }
mstore(0x2780, mulmod(mload(0x1380), mload(0x13a0), f_q))
mstore(0x27a0, mulmod(mload(0x13c0), mload(0x13e0), f_q))
mstore(0x27c0, mulmod(mload(0x1400), mload(0x1420), f_q))
mstore(0x27e0, mulmod(mload(0x1440), mload(0x1460), f_q))
mstore(0x2800, mulmod(mload(0x1480), mload(0x14a0), f_q))
mstore(0x2820, mulmod(mload(0x14c0), mload(0x14e0), f_q))
mstore(0x2840, mulmod(mload(0x1500), mload(0x1520), f_q))
mstore(0x2860, mulmod(mload(0x1540), mload(0x1560), f_q))
mstore(0x2880, mulmod(mload(0x1580), mload(0x15a0), f_q))
mstore(0x28a0, mulmod(mload(0x15c0), mload(0x15e0), f_q))
mstore(0x28c0, mulmod(mload(0x1600), mload(0x1620), f_q))
mstore(0x28e0, mulmod(mload(0x1640), mload(0x1660), f_q))
mstore(0x2900, mulmod(mload(0x1680), mload(0x16a0), f_q))
mstore(0x2920, mulmod(mload(0x16c0), mload(0x16e0), f_q))
mstore(0x2940, mulmod(mload(0x1700), mload(0x1720), f_q))
mstore(0x2960, mulmod(mload(0x1740), mload(0x1760), f_q))
mstore(0x2980, mulmod(mload(0x1780), mload(0x17a0), f_q))
mstore(0x29a0, mulmod(mload(0x17c0), mload(0x17e0), f_q))
mstore(0x29c0, mulmod(mload(0x1800), mload(0x1820), f_q))
mstore(0x29e0, mulmod(mload(0x1840), mload(0x1860), f_q))
mstore(0x2a00, mulmod(mload(0x1880), mload(0x18a0), f_q))
mstore(0x2a20, mulmod(mload(0x18c0), mload(0x18e0), f_q))
mstore(0x2a40, mulmod(mload(0x1900), mload(0x1920), f_q))
mstore(0x2a60, mulmod(mload(0x1940), mload(0x1960), f_q))
mstore(0x2a80, mulmod(mload(0x1980), mload(0x19a0), f_q))
mstore(0x2aa0, mulmod(mload(0x19c0), mload(0x19e0), f_q))
mstore(0x2ac0, mulmod(mload(0x1a00), mload(0x1a20), f_q))
mstore(0x2ae0, mulmod(mload(0x1a40), mload(0x1a60), f_q))
mstore(0x2b00, mulmod(mload(0x1a80), mload(0x1aa0), f_q))
mstore(0x2b20, mulmod(mload(0x1ac0), mload(0x1ae0), f_q))
mstore(0x2b40, mulmod(mload(0x1b00), mload(0x1b20), f_q))
mstore(0x2b60, mulmod(mload(0x1b40), mload(0x1b60), f_q))
mstore(0x2b80, mulmod(mload(0x1b80), mload(0x1ba0), f_q))
mstore(0x2ba0, mulmod(mload(0x1bc0), mload(0x1be0), f_q))
mstore(0x2bc0, mulmod(mload(0x1c00), mload(0x1c20), f_q))
mstore(0x2be0, mulmod(mload(0x1c40), mload(0x1c60), f_q))
mstore(0x2c00, mulmod(mload(0x1c80), mload(0x1ca0), f_q))
mstore(0x2c20, mulmod(mload(0x1cc0), mload(0x1ce0), f_q))
mstore(0x2c40, mulmod(mload(0x1d00), mload(0x1d20), f_q))
mstore(0x2c60, mulmod(mload(0x1d40), mload(0x1d60), f_q))
mstore(0x2c80, mulmod(mload(0x1d80), mload(0x1da0), f_q))
mstore(0x2ca0, mulmod(mload(0x1dc0), mload(0x1de0), f_q))
mstore(0x2cc0, mulmod(mload(0x1e00), mload(0x1e20), f_q))
mstore(0x2ce0, mulmod(mload(0x1e40), mload(0x1e60), f_q))
mstore(0x2d00, mulmod(mload(0x1e80), mload(0x1ea0), f_q))
mstore(0x2d20, mulmod(mload(0x1ec0), mload(0x1ee0), f_q))
mstore(0x2d40, mulmod(mload(0x1f00), mload(0x1f20), f_q))
mstore(0x2d60, mulmod(mload(0x1f40), mload(0x1f60), f_q))
mstore(0x2d80, mulmod(mload(0x1f80), mload(0x1fa0), f_q))
mstore(0x2da0, mulmod(mload(0x1fc0), mload(0x1fe0), f_q))
mstore(0x2dc0, mulmod(mload(0x2000), mload(0x2020), f_q))
{
            let result := mulmod(mload(0x2860), mload(0x20), f_q)
result := addmod(mulmod(mload(0x2880), mload(0x40), f_q), result, f_q)
result := addmod(mulmod(mload(0x28a0), mload(0x60), f_q), result, f_q)
result := addmod(mulmod(mload(0x28c0), mload(0x80), f_q), result, f_q)
result := addmod(mulmod(mload(0x28e0), mload(0xa0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2900), mload(0xc0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2920), mload(0xe0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2940), mload(0x100), f_q), result, f_q)
result := addmod(mulmod(mload(0x2960), mload(0x120), f_q), result, f_q)
result := addmod(mulmod(mload(0x2980), mload(0x140), f_q), result, f_q)
result := addmod(mulmod(mload(0x29a0), mload(0x160), f_q), result, f_q)
result := addmod(mulmod(mload(0x29c0), mload(0x180), f_q), result, f_q)
result := addmod(mulmod(mload(0x29e0), mload(0x1a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2a00), mload(0x1c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2a20), mload(0x1e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2a40), mload(0x200), f_q), result, f_q)
result := addmod(mulmod(mload(0x2a60), mload(0x220), f_q), result, f_q)
result := addmod(mulmod(mload(0x2a80), mload(0x240), f_q), result, f_q)
result := addmod(mulmod(mload(0x2aa0), mload(0x260), f_q), result, f_q)
result := addmod(mulmod(mload(0x2ac0), mload(0x280), f_q), result, f_q)
result := addmod(mulmod(mload(0x2ae0), mload(0x2a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2b00), mload(0x2c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2b20), mload(0x2e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2b40), mload(0x300), f_q), result, f_q)
result := addmod(mulmod(mload(0x2b60), mload(0x320), f_q), result, f_q)
result := addmod(mulmod(mload(0x2b80), mload(0x340), f_q), result, f_q)
result := addmod(mulmod(mload(0x2ba0), mload(0x360), f_q), result, f_q)
result := addmod(mulmod(mload(0x2bc0), mload(0x380), f_q), result, f_q)
result := addmod(mulmod(mload(0x2be0), mload(0x3a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2c00), mload(0x3c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2c20), mload(0x3e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2c40), mload(0x400), f_q), result, f_q)
result := addmod(mulmod(mload(0x2c60), mload(0x420), f_q), result, f_q)
result := addmod(mulmod(mload(0x2c80), mload(0x440), f_q), result, f_q)
result := addmod(mulmod(mload(0x2ca0), mload(0x460), f_q), result, f_q)
result := addmod(mulmod(mload(0x2cc0), mload(0x480), f_q), result, f_q)
result := addmod(mulmod(mload(0x2ce0), mload(0x4a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2d00), mload(0x4c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2d20), mload(0x4e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2d40), mload(0x500), f_q), result, f_q)
result := addmod(mulmod(mload(0x2d60), mload(0x520), f_q), result, f_q)
result := addmod(mulmod(mload(0x2d80), mload(0x540), f_q), result, f_q)
result := addmod(mulmod(mload(0x2da0), mload(0x560), f_q), result, f_q)
result := addmod(mulmod(mload(0x2dc0), mload(0x580), f_q), result, f_q)
mstore(11744, result)
        }
mstore(0x2e00, mulmod(mload(0xac0), mload(0xaa0), f_q))
mstore(0x2e20, addmod(mload(0xa80), mload(0x2e00), f_q))
mstore(0x2e40, addmod(mload(0x2e20), sub(f_q, mload(0xae0)), f_q))
mstore(0x2e60, mulmod(mload(0x2e40), mload(0xbe0), f_q))
mstore(0x2e80, mulmod(mload(0x8e0), mload(0x2e60), f_q))
mstore(0x2ea0, mulmod(mload(0xb40), mload(0xb20), f_q))
mstore(0x2ec0, addmod(mload(0xb00), mload(0x2ea0), f_q))
mstore(0x2ee0, addmod(mload(0x2ec0), sub(f_q, mload(0xb60)), f_q))
mstore(0x2f00, mulmod(mload(0x2ee0), mload(0xc00), f_q))
mstore(0x2f20, addmod(mload(0x2e80), mload(0x2f00), f_q))
mstore(0x2f40, mulmod(mload(0x8e0), mload(0x2f20), f_q))
mstore(0x2f60, addmod(1, sub(f_q, mload(0xce0)), f_q))
mstore(0x2f80, mulmod(mload(0x2f60), mload(0x2860), f_q))
mstore(0x2fa0, addmod(mload(0x2f40), mload(0x2f80), f_q))
mstore(0x2fc0, mulmod(mload(0x8e0), mload(0x2fa0), f_q))
mstore(0x2fe0, mulmod(mload(0xd40), mload(0xd40), f_q))
mstore(0x3000, addmod(mload(0x2fe0), sub(f_q, mload(0xd40)), f_q))
mstore(0x3020, mulmod(mload(0x3000), mload(0x2780), f_q))
mstore(0x3040, addmod(mload(0x2fc0), mload(0x3020), f_q))
mstore(0x3060, mulmod(mload(0x8e0), mload(0x3040), f_q))
mstore(0x3080, addmod(mload(0xd40), sub(f_q, mload(0xd20)), f_q))
mstore(0x30a0, mulmod(mload(0x3080), mload(0x2860), f_q))
mstore(0x30c0, addmod(mload(0x3060), mload(0x30a0), f_q))
mstore(0x30e0, mulmod(mload(0x8e0), mload(0x30c0), f_q))
mstore(0x3100, addmod(1, sub(f_q, mload(0x2780)), f_q))
mstore(0x3120, addmod(mload(0x27a0), mload(0x27c0), f_q))
mstore(0x3140, addmod(mload(0x3120), mload(0x27e0), f_q))
mstore(0x3160, addmod(mload(0x3140), mload(0x2800), f_q))
mstore(0x3180, addmod(mload(0x3160), mload(0x2820), f_q))
mstore(0x31a0, addmod(mload(0x3180), mload(0x2840), f_q))
mstore(0x31c0, addmod(mload(0x3100), sub(f_q, mload(0x31a0)), f_q))
mstore(0x31e0, mulmod(mload(0xc40), mload(0x720), f_q))
mstore(0x3200, addmod(mload(0xba0), mload(0x31e0), f_q))
mstore(0x3220, addmod(mload(0x3200), mload(0x780), f_q))
mstore(0x3240, mulmod(mload(0xc60), mload(0x720), f_q))
mstore(0x3260, addmod(mload(0xa80), mload(0x3240), f_q))
mstore(0x3280, addmod(mload(0x3260), mload(0x780), f_q))
mstore(0x32a0, mulmod(mload(0x3280), mload(0x3220), f_q))
mstore(0x32c0, mulmod(mload(0xc80), mload(0x720), f_q))
mstore(0x32e0, addmod(mload(0xb00), mload(0x32c0), f_q))
mstore(0x3300, addmod(mload(0x32e0), mload(0x780), f_q))
mstore(0x3320, mulmod(mload(0x3300), mload(0x32a0), f_q))
mstore(0x3340, mulmod(mload(0x3320), mload(0xd00), f_q))
mstore(0x3360, mulmod(1, mload(0x720), f_q))
mstore(0x3380, mulmod(mload(0xa40), mload(0x3360), f_q))
mstore(0x33a0, addmod(mload(0xba0), mload(0x3380), f_q))
mstore(0x33c0, addmod(mload(0x33a0), mload(0x780), f_q))
mstore(0x33e0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x720), f_q))
mstore(0x3400, mulmod(mload(0xa40), mload(0x33e0), f_q))
mstore(0x3420, addmod(mload(0xa80), mload(0x3400), f_q))
mstore(0x3440, addmod(mload(0x3420), mload(0x780), f_q))
mstore(0x3460, mulmod(mload(0x3440), mload(0x33c0), f_q))
mstore(0x3480, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x720), f_q))
mstore(0x34a0, mulmod(mload(0xa40), mload(0x3480), f_q))
mstore(0x34c0, addmod(mload(0xb00), mload(0x34a0), f_q))
mstore(0x34e0, addmod(mload(0x34c0), mload(0x780), f_q))
mstore(0x3500, mulmod(mload(0x34e0), mload(0x3460), f_q))
mstore(0x3520, mulmod(mload(0x3500), mload(0xce0), f_q))
mstore(0x3540, addmod(mload(0x3340), sub(f_q, mload(0x3520)), f_q))
mstore(0x3560, mulmod(mload(0x3540), mload(0x31c0), f_q))
mstore(0x3580, addmod(mload(0x30e0), mload(0x3560), f_q))
mstore(0x35a0, mulmod(mload(0x8e0), mload(0x3580), f_q))
mstore(0x35c0, mulmod(mload(0xca0), mload(0x720), f_q))
mstore(0x35e0, addmod(mload(0xb80), mload(0x35c0), f_q))
mstore(0x3600, addmod(mload(0x35e0), mload(0x780), f_q))
mstore(0x3620, mulmod(mload(0xcc0), mload(0x720), f_q))
mstore(0x3640, addmod(mload(0x2de0), mload(0x3620), f_q))
mstore(0x3660, addmod(mload(0x3640), mload(0x780), f_q))
mstore(0x3680, mulmod(mload(0x3660), mload(0x3600), f_q))
mstore(0x36a0, mulmod(mload(0x3680), mload(0xd60), f_q))
mstore(0x36c0, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x720), f_q))
mstore(0x36e0, mulmod(mload(0xa40), mload(0x36c0), f_q))
mstore(0x3700, addmod(mload(0xb80), mload(0x36e0), f_q))
mstore(0x3720, addmod(mload(0x3700), mload(0x780), f_q))
mstore(0x3740, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x720), f_q))
mstore(0x3760, mulmod(mload(0xa40), mload(0x3740), f_q))
mstore(0x3780, addmod(mload(0x2de0), mload(0x3760), f_q))
mstore(0x37a0, addmod(mload(0x3780), mload(0x780), f_q))
mstore(0x37c0, mulmod(mload(0x37a0), mload(0x3720), f_q))
mstore(0x37e0, mulmod(mload(0x37c0), mload(0xd40), f_q))
mstore(0x3800, addmod(mload(0x36a0), sub(f_q, mload(0x37e0)), f_q))
mstore(0x3820, mulmod(mload(0x3800), mload(0x31c0), f_q))
mstore(0x3840, addmod(mload(0x35a0), mload(0x3820), f_q))
mstore(0x3860, mulmod(mload(0x8e0), mload(0x3840), f_q))
mstore(0x3880, mulmod(mload(0xd80), mload(0x2860), f_q))
mstore(0x38a0, addmod(mload(0x3860), mload(0x3880), f_q))
mstore(0x38c0, mulmod(mload(0x8e0), mload(0x38a0), f_q))
mstore(0x38e0, mulmod(mload(0xd80), mload(0x2780), f_q))
mstore(0x3900, addmod(mload(0x38c0), mload(0x38e0), f_q))
mstore(0x3920, mulmod(mload(0x8e0), mload(0x3900), f_q))
mstore(0x3940, addmod(mload(0xbc0), mload(0x720), f_q))
mstore(0x3960, addmod(mload(0xb80), mload(0x720), f_q))
mstore(0x3980, mulmod(mload(0x3960), mload(0x3940), f_q))
mstore(0x39a0, addmod(mload(0xda0), sub(f_q, mload(0xd80)), f_q))
mstore(0x39c0, mulmod(mload(0x39a0), mload(0x3980), f_q))
mstore(0x39e0, mulmod(mload(0x3960), mload(0xdc0), f_q))
mstore(0x3a00, addmod(mload(0x3940), sub(f_q, mload(0x39e0)), f_q))
mstore(0x3a20, addmod(mload(0x39c0), sub(f_q, mload(0x3a00)), f_q))
mstore(0x3a40, mulmod(mload(0x3a20), mload(0x31c0), f_q))
mstore(0x3a60, addmod(mload(0x3920), mload(0x3a40), f_q))
mstore(0x3a80, mulmod(mload(0x1320), mload(0x1320), f_q))
mstore(0x3aa0, mulmod(mload(0x3a80), mload(0x1320), f_q))
mstore(0x3ac0, mulmod(mload(0x3aa0), mload(0x1320), f_q))
mstore(0x3ae0, mulmod(1, mload(0x1320), f_q))
mstore(0x3b00, mulmod(1, mload(0x3a80), f_q))
mstore(0x3b20, mulmod(1, mload(0x3aa0), f_q))
mstore(0x3b40, mulmod(mload(0x3a60), mload(0x1340), f_q))
mstore(0x3b60, mulmod(mload(0x1000), mload(0xa40), f_q))
mstore(0x3b80, mulmod(mload(0xa40), 1, f_q))
mstore(0x3ba0, addmod(mload(0xf00), sub(f_q, mload(0x3b80)), f_q))
mstore(0x3bc0, mulmod(mload(0xa40), 6143038923529407703646399695489445107254060255791852207908457597807435305312, f_q))
mstore(0x3be0, addmod(mload(0xf00), sub(f_q, mload(0x3bc0)), f_q))
mstore(0x3c00, mulmod(mload(0xa40), 13446667982376394161563610564587413125564757801019538732601045199901075958935, f_q))
mstore(0x3c20, addmod(mload(0xf00), sub(f_q, mload(0x3c00)), f_q))
mstore(0x3c40, mulmod(mload(0xa40), 20399963857427891121373969697480515951916080097087921832172879765607926713957, f_q))
mstore(0x3c60, addmod(mload(0xf00), sub(f_q, mload(0x3c40)), f_q))
mstore(0x3c80, mulmod(mload(0xa40), 21813856626197829021720820945327074612555900476153638460378780375714815148448, f_q))
mstore(0x3ca0, addmod(mload(0xf00), sub(f_q, mload(0x3c80)), f_q))
{
            let result := mulmod(mload(0xf00), 21226454350967877604996201857734295406716648685573268075789461576572118204629, f_q)
result := addmod(mulmod(mload(0xa40), 661788520871397617250203887522979681831715714842766267908742610003690290988, f_q), result, f_q)
mstore(15552, result)
        }
{
            let result := mulmod(mload(0xf00), 5861127194460807938380394597488182289255701836742860267379931784243223318895, f_q)
result := addmod(mulmod(mload(0xa40), 3390128162633191074125945073253823994540311710737587304644639100065963932907, f_q), result, f_q)
mstore(15584, result)
        }
{
            let result := mulmod(mload(0xf00), 3390128162633191074125945073253823994540311710737587304644639100065963932907, f_q)
result := addmod(mulmod(mload(0xa40), 90032813343344028270095592867940481147765329332774301746019309308684830918, f_q), result, f_q)
mstore(15616, result)
        }
{
            let result := mulmod(mload(0xf00), 6081264866030232838172298610738481044383077933941150375357654711302968300110, f_q)
result := addmod(mulmod(mload(0xa40), 17149721552240364152242558882079404925549682875792813195623508753281175593761, f_q), result, f_q)
mstore(15648, result)
        }
mstore(0x3d40, mulmod(1, mload(0x3ba0), f_q))
mstore(0x3d60, mulmod(mload(0x3d40), mload(0x3c20), f_q))
mstore(0x3d80, mulmod(mload(0x3d60), mload(0x3be0), f_q))
mstore(0x3da0, mulmod(mload(0x3d80), mload(0x3ca0), f_q))
{
            let result := mulmod(mload(0xf00), 1, f_q)
result := addmod(mulmod(mload(0xa40), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(15808, result)
        }
{
            let result := mulmod(mload(0xf00), 4611080974564654620672770701418215399259648222345233353533516903428903490338, f_q)
result := addmod(mulmod(mload(0xa40), 17277161897274620601573635043839059689288716178070800990164687283146905005279, f_q), result, f_q)
mstore(15840, result)
        }
{
            let result := mulmod(mload(0xf00), 18415107727890515204339219355410953633961625232239610076569258667727996888339, f_q)
result := addmod(mulmod(mload(0xa40), 17583596301131204162369215904507730946250434667860147994294529557488431009797, f_q), result, f_q)
mstore(15872, result)
        }
{
            let result := mulmod(mload(0xf00), 955401216438685250451136621446753002855966875247240148565594704240333744183, f_q)
result := addmod(mulmod(mload(0xa40), 19875036825359531302421172351558829289511004470138001576279762328320245313525, f_q), result, f_q)
mstore(15904, result)
        }
mstore(0x3e40, mulmod(mload(0x3d60), mload(0x3c60), f_q))
{
            let result := mulmod(mload(0xf00), 8441574889462881060682795180669861962983606599396495611097158986674732536683, f_q)
result := addmod(mulmod(mload(0xa40), 13446667982376394161563610564587413125564757801019538732601045199901075958934, f_q), result, f_q)
mstore(15968, result)
        }
{
            let result := mulmod(mload(0xf00), 13446667982376394161563610564587413125564757801019538732601045199901075958934, f_q)
result := addmod(mulmod(mload(0xa40), 7303629058846986457917210869097968018310697545227686524692587602093640653623, f_q), result, f_q)
mstore(16000, result)
        }
{
            let prod := mload(0x3cc0)

                prod := mulmod(mload(0x3ce0), prod, f_q)
                mstore(0x3ea0, prod)
            
                prod := mulmod(mload(0x3d00), prod, f_q)
                mstore(0x3ec0, prod)
            
                prod := mulmod(mload(0x3d20), prod, f_q)
                mstore(0x3ee0, prod)
            
                prod := mulmod(mload(0x3dc0), prod, f_q)
                mstore(0x3f00, prod)
            
                prod := mulmod(mload(0x3d40), prod, f_q)
                mstore(0x3f20, prod)
            
                prod := mulmod(mload(0x3de0), prod, f_q)
                mstore(0x3f40, prod)
            
                prod := mulmod(mload(0x3e00), prod, f_q)
                mstore(0x3f60, prod)
            
                prod := mulmod(mload(0x3e20), prod, f_q)
                mstore(0x3f80, prod)
            
                prod := mulmod(mload(0x3e40), prod, f_q)
                mstore(0x3fa0, prod)
            
                prod := mulmod(mload(0x3e60), prod, f_q)
                mstore(0x3fc0, prod)
            
                prod := mulmod(mload(0x3e80), prod, f_q)
                mstore(0x3fe0, prod)
            
                prod := mulmod(mload(0x3d60), prod, f_q)
                mstore(0x4000, prod)
            
        }
mstore(0x4040, 32)
mstore(0x4060, 32)
mstore(0x4080, 32)
mstore(0x40a0, mload(0x4000))
mstore(0x40c0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x40e0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x4040, 0xc0, 0x4020, 0x20), 1), success)
{
            
            let inv := mload(0x4020)
            let v
        
                    v := mload(0x3d60)
                    mstore(15712, mulmod(mload(0x3fe0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3e80)
                    mstore(16000, mulmod(mload(0x3fc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3e60)
                    mstore(15968, mulmod(mload(0x3fa0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3e40)
                    mstore(15936, mulmod(mload(0x3f80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3e20)
                    mstore(15904, mulmod(mload(0x3f60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3e00)
                    mstore(15872, mulmod(mload(0x3f40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3de0)
                    mstore(15840, mulmod(mload(0x3f20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3d40)
                    mstore(15680, mulmod(mload(0x3f00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3dc0)
                    mstore(15808, mulmod(mload(0x3ee0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3d20)
                    mstore(15648, mulmod(mload(0x3ec0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3d00)
                    mstore(15616, mulmod(mload(0x3ea0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3ce0)
                    mstore(15584, mulmod(mload(0x3cc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x3cc0, inv)

        }
{
            let result := mload(0x3cc0)
result := addmod(mload(0x3ce0), result, f_q)
result := addmod(mload(0x3d00), result, f_q)
result := addmod(mload(0x3d20), result, f_q)
mstore(16640, result)
        }
mstore(0x4120, mulmod(mload(0x3da0), mload(0x3d40), f_q))
{
            let result := mload(0x3dc0)
mstore(16704, result)
        }
mstore(0x4160, mulmod(mload(0x3da0), mload(0x3e40), f_q))
{
            let result := mload(0x3de0)
result := addmod(mload(0x3e00), result, f_q)
result := addmod(mload(0x3e20), result, f_q)
mstore(16768, result)
        }
mstore(0x41a0, mulmod(mload(0x3da0), mload(0x3d60), f_q))
{
            let result := mload(0x3e60)
result := addmod(mload(0x3e80), result, f_q)
mstore(16832, result)
        }
{
            let prod := mload(0x4100)

                prod := mulmod(mload(0x4140), prod, f_q)
                mstore(0x41e0, prod)
            
                prod := mulmod(mload(0x4180), prod, f_q)
                mstore(0x4200, prod)
            
                prod := mulmod(mload(0x41c0), prod, f_q)
                mstore(0x4220, prod)
            
        }
mstore(0x4260, 32)
mstore(0x4280, 32)
mstore(0x42a0, 32)
mstore(0x42c0, mload(0x4220))
mstore(0x42e0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x4300, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x4260, 0xc0, 0x4240, 0x20), 1), success)
{
            
            let inv := mload(0x4240)
            let v
        
                    v := mload(0x41c0)
                    mstore(16832, mulmod(mload(0x4200), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4180)
                    mstore(16768, mulmod(mload(0x41e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x4140)
                    mstore(16704, mulmod(mload(0x4100), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x4100, inv)

        }
mstore(0x4320, mulmod(mload(0x4120), mload(0x4140), f_q))
mstore(0x4340, mulmod(mload(0x4160), mload(0x4180), f_q))
mstore(0x4360, mulmod(mload(0x41a0), mload(0x41c0), f_q))
mstore(0x4380, mulmod(mload(0xe00), mload(0xe00), f_q))
mstore(0x43a0, mulmod(mload(0x4380), mload(0xe00), f_q))
mstore(0x43c0, mulmod(mload(0x43a0), mload(0xe00), f_q))
mstore(0x43e0, mulmod(mload(0x43c0), mload(0xe00), f_q))
mstore(0x4400, mulmod(mload(0x43e0), mload(0xe00), f_q))
mstore(0x4420, mulmod(mload(0x4400), mload(0xe00), f_q))
mstore(0x4440, mulmod(mload(0x4420), mload(0xe00), f_q))
mstore(0x4460, mulmod(mload(0x4440), mload(0xe00), f_q))
mstore(0x4480, mulmod(mload(0x4460), mload(0xe00), f_q))
mstore(0x44a0, mulmod(mload(0x4480), mload(0xe00), f_q))
mstore(0x44c0, mulmod(mload(0x44a0), mload(0xe00), f_q))
mstore(0x44e0, mulmod(mload(0x44c0), mload(0xe00), f_q))
mstore(0x4500, mulmod(mload(0xe60), mload(0xe60), f_q))
mstore(0x4520, mulmod(mload(0x4500), mload(0xe60), f_q))
mstore(0x4540, mulmod(mload(0x4520), mload(0xe60), f_q))
{
            let result := mulmod(mload(0xa80), mload(0x3cc0), f_q)
result := addmod(mulmod(mload(0xaa0), mload(0x3ce0), f_q), result, f_q)
result := addmod(mulmod(mload(0xac0), mload(0x3d00), f_q), result, f_q)
result := addmod(mulmod(mload(0xae0), mload(0x3d20), f_q), result, f_q)
mstore(17760, result)
        }
mstore(0x4580, mulmod(mload(0x4560), mload(0x4100), f_q))
mstore(0x45a0, mulmod(sub(f_q, mload(0x4580)), 1, f_q))
{
            let result := mulmod(mload(0xb00), mload(0x3cc0), f_q)
result := addmod(mulmod(mload(0xb20), mload(0x3ce0), f_q), result, f_q)
result := addmod(mulmod(mload(0xb40), mload(0x3d00), f_q), result, f_q)
result := addmod(mulmod(mload(0xb60), mload(0x3d20), f_q), result, f_q)
mstore(17856, result)
        }
mstore(0x45e0, mulmod(mload(0x45c0), mload(0x4100), f_q))
mstore(0x4600, mulmod(sub(f_q, mload(0x45e0)), mload(0xe00), f_q))
mstore(0x4620, mulmod(1, mload(0xe00), f_q))
mstore(0x4640, addmod(mload(0x45a0), mload(0x4600), f_q))
mstore(0x4660, mulmod(mload(0x4640), 1, f_q))
mstore(0x4680, mulmod(mload(0x4620), 1, f_q))
mstore(0x46a0, mulmod(1, mload(0x4120), f_q))
{
            let result := mulmod(mload(0xb80), mload(0x3dc0), f_q)
mstore(18112, result)
        }
mstore(0x46e0, mulmod(mload(0x46c0), mload(0x4320), f_q))
mstore(0x4700, mulmod(sub(f_q, mload(0x46e0)), 1, f_q))
mstore(0x4720, mulmod(mload(0x46a0), 1, f_q))
{
            let result := mulmod(mload(0xdc0), mload(0x3dc0), f_q)
mstore(18240, result)
        }
mstore(0x4760, mulmod(mload(0x4740), mload(0x4320), f_q))
mstore(0x4780, mulmod(sub(f_q, mload(0x4760)), mload(0xe00), f_q))
mstore(0x47a0, mulmod(mload(0x46a0), mload(0xe00), f_q))
mstore(0x47c0, addmod(mload(0x4700), mload(0x4780), f_q))
{
            let result := mulmod(mload(0xba0), mload(0x3dc0), f_q)
mstore(18400, result)
        }
mstore(0x4800, mulmod(mload(0x47e0), mload(0x4320), f_q))
mstore(0x4820, mulmod(sub(f_q, mload(0x4800)), mload(0x4380), f_q))
mstore(0x4840, mulmod(mload(0x46a0), mload(0x4380), f_q))
mstore(0x4860, addmod(mload(0x47c0), mload(0x4820), f_q))
{
            let result := mulmod(mload(0xbc0), mload(0x3dc0), f_q)
mstore(18560, result)
        }
mstore(0x48a0, mulmod(mload(0x4880), mload(0x4320), f_q))
mstore(0x48c0, mulmod(sub(f_q, mload(0x48a0)), mload(0x43a0), f_q))
mstore(0x48e0, mulmod(mload(0x46a0), mload(0x43a0), f_q))
mstore(0x4900, addmod(mload(0x4860), mload(0x48c0), f_q))
{
            let result := mulmod(mload(0xbe0), mload(0x3dc0), f_q)
mstore(18720, result)
        }
mstore(0x4940, mulmod(mload(0x4920), mload(0x4320), f_q))
mstore(0x4960, mulmod(sub(f_q, mload(0x4940)), mload(0x43c0), f_q))
mstore(0x4980, mulmod(mload(0x46a0), mload(0x43c0), f_q))
mstore(0x49a0, addmod(mload(0x4900), mload(0x4960), f_q))
{
            let result := mulmod(mload(0xc00), mload(0x3dc0), f_q)
mstore(18880, result)
        }
mstore(0x49e0, mulmod(mload(0x49c0), mload(0x4320), f_q))
mstore(0x4a00, mulmod(sub(f_q, mload(0x49e0)), mload(0x43e0), f_q))
mstore(0x4a20, mulmod(mload(0x46a0), mload(0x43e0), f_q))
mstore(0x4a40, addmod(mload(0x49a0), mload(0x4a00), f_q))
{
            let result := mulmod(mload(0xc40), mload(0x3dc0), f_q)
mstore(19040, result)
        }
mstore(0x4a80, mulmod(mload(0x4a60), mload(0x4320), f_q))
mstore(0x4aa0, mulmod(sub(f_q, mload(0x4a80)), mload(0x4400), f_q))
mstore(0x4ac0, mulmod(mload(0x46a0), mload(0x4400), f_q))
mstore(0x4ae0, addmod(mload(0x4a40), mload(0x4aa0), f_q))
{
            let result := mulmod(mload(0xc60), mload(0x3dc0), f_q)
mstore(19200, result)
        }
mstore(0x4b20, mulmod(mload(0x4b00), mload(0x4320), f_q))
mstore(0x4b40, mulmod(sub(f_q, mload(0x4b20)), mload(0x4420), f_q))
mstore(0x4b60, mulmod(mload(0x46a0), mload(0x4420), f_q))
mstore(0x4b80, addmod(mload(0x4ae0), mload(0x4b40), f_q))
{
            let result := mulmod(mload(0xc80), mload(0x3dc0), f_q)
mstore(19360, result)
        }
mstore(0x4bc0, mulmod(mload(0x4ba0), mload(0x4320), f_q))
mstore(0x4be0, mulmod(sub(f_q, mload(0x4bc0)), mload(0x4440), f_q))
mstore(0x4c00, mulmod(mload(0x46a0), mload(0x4440), f_q))
mstore(0x4c20, addmod(mload(0x4b80), mload(0x4be0), f_q))
{
            let result := mulmod(mload(0xca0), mload(0x3dc0), f_q)
mstore(19520, result)
        }
mstore(0x4c60, mulmod(mload(0x4c40), mload(0x4320), f_q))
mstore(0x4c80, mulmod(sub(f_q, mload(0x4c60)), mload(0x4460), f_q))
mstore(0x4ca0, mulmod(mload(0x46a0), mload(0x4460), f_q))
mstore(0x4cc0, addmod(mload(0x4c20), mload(0x4c80), f_q))
{
            let result := mulmod(mload(0xcc0), mload(0x3dc0), f_q)
mstore(19680, result)
        }
mstore(0x4d00, mulmod(mload(0x4ce0), mload(0x4320), f_q))
mstore(0x4d20, mulmod(sub(f_q, mload(0x4d00)), mload(0x4480), f_q))
mstore(0x4d40, mulmod(mload(0x46a0), mload(0x4480), f_q))
mstore(0x4d60, addmod(mload(0x4cc0), mload(0x4d20), f_q))
mstore(0x4d80, mulmod(mload(0x3ae0), mload(0x4120), f_q))
mstore(0x4da0, mulmod(mload(0x3b00), mload(0x4120), f_q))
mstore(0x4dc0, mulmod(mload(0x3b20), mload(0x4120), f_q))
{
            let result := mulmod(mload(0x3b40), mload(0x3dc0), f_q)
mstore(19936, result)
        }
mstore(0x4e00, mulmod(mload(0x4de0), mload(0x4320), f_q))
mstore(0x4e20, mulmod(sub(f_q, mload(0x4e00)), mload(0x44a0), f_q))
mstore(0x4e40, mulmod(mload(0x46a0), mload(0x44a0), f_q))
mstore(0x4e60, mulmod(mload(0x4d80), mload(0x44a0), f_q))
mstore(0x4e80, mulmod(mload(0x4da0), mload(0x44a0), f_q))
mstore(0x4ea0, mulmod(mload(0x4dc0), mload(0x44a0), f_q))
mstore(0x4ec0, addmod(mload(0x4d60), mload(0x4e20), f_q))
{
            let result := mulmod(mload(0xc20), mload(0x3dc0), f_q)
mstore(20192, result)
        }
mstore(0x4f00, mulmod(mload(0x4ee0), mload(0x4320), f_q))
mstore(0x4f20, mulmod(sub(f_q, mload(0x4f00)), mload(0x44c0), f_q))
mstore(0x4f40, mulmod(mload(0x46a0), mload(0x44c0), f_q))
mstore(0x4f60, addmod(mload(0x4ec0), mload(0x4f20), f_q))
mstore(0x4f80, mulmod(mload(0x4f60), mload(0xe60), f_q))
mstore(0x4fa0, mulmod(mload(0x4720), mload(0xe60), f_q))
mstore(0x4fc0, mulmod(mload(0x47a0), mload(0xe60), f_q))
mstore(0x4fe0, mulmod(mload(0x4840), mload(0xe60), f_q))
mstore(0x5000, mulmod(mload(0x48e0), mload(0xe60), f_q))
mstore(0x5020, mulmod(mload(0x4980), mload(0xe60), f_q))
mstore(0x5040, mulmod(mload(0x4a20), mload(0xe60), f_q))
mstore(0x5060, mulmod(mload(0x4ac0), mload(0xe60), f_q))
mstore(0x5080, mulmod(mload(0x4b60), mload(0xe60), f_q))
mstore(0x50a0, mulmod(mload(0x4c00), mload(0xe60), f_q))
mstore(0x50c0, mulmod(mload(0x4ca0), mload(0xe60), f_q))
mstore(0x50e0, mulmod(mload(0x4d40), mload(0xe60), f_q))
mstore(0x5100, mulmod(mload(0x4e40), mload(0xe60), f_q))
mstore(0x5120, mulmod(mload(0x4e60), mload(0xe60), f_q))
mstore(0x5140, mulmod(mload(0x4e80), mload(0xe60), f_q))
mstore(0x5160, mulmod(mload(0x4ea0), mload(0xe60), f_q))
mstore(0x5180, mulmod(mload(0x4f40), mload(0xe60), f_q))
mstore(0x51a0, addmod(mload(0x4660), mload(0x4f80), f_q))
mstore(0x51c0, mulmod(1, mload(0x4160), f_q))
{
            let result := mulmod(mload(0xce0), mload(0x3de0), f_q)
result := addmod(mulmod(mload(0xd00), mload(0x3e00), f_q), result, f_q)
result := addmod(mulmod(mload(0xd20), mload(0x3e20), f_q), result, f_q)
mstore(20960, result)
        }
mstore(0x5200, mulmod(mload(0x51e0), mload(0x4340), f_q))
mstore(0x5220, mulmod(sub(f_q, mload(0x5200)), 1, f_q))
mstore(0x5240, mulmod(mload(0x51c0), 1, f_q))
mstore(0x5260, mulmod(mload(0x5220), mload(0x4500), f_q))
mstore(0x5280, mulmod(mload(0x5240), mload(0x4500), f_q))
mstore(0x52a0, addmod(mload(0x51a0), mload(0x5260), f_q))
mstore(0x52c0, mulmod(1, mload(0x41a0), f_q))
{
            let result := mulmod(mload(0xd40), mload(0x3e60), f_q)
result := addmod(mulmod(mload(0xd60), mload(0x3e80), f_q), result, f_q)
mstore(21216, result)
        }
mstore(0x5300, mulmod(mload(0x52e0), mload(0x4360), f_q))
mstore(0x5320, mulmod(sub(f_q, mload(0x5300)), 1, f_q))
mstore(0x5340, mulmod(mload(0x52c0), 1, f_q))
{
            let result := mulmod(mload(0xd80), mload(0x3e60), f_q)
result := addmod(mulmod(mload(0xda0), mload(0x3e80), f_q), result, f_q)
mstore(21344, result)
        }
mstore(0x5380, mulmod(mload(0x5360), mload(0x4360), f_q))
mstore(0x53a0, mulmod(sub(f_q, mload(0x5380)), mload(0xe00), f_q))
mstore(0x53c0, mulmod(mload(0x52c0), mload(0xe00), f_q))
mstore(0x53e0, addmod(mload(0x5320), mload(0x53a0), f_q))
mstore(0x5400, mulmod(mload(0x53e0), mload(0x4520), f_q))
mstore(0x5420, mulmod(mload(0x5340), mload(0x4520), f_q))
mstore(0x5440, mulmod(mload(0x53c0), mload(0x4520), f_q))
mstore(0x5460, addmod(mload(0x52a0), mload(0x5400), f_q))
mstore(0x5480, mulmod(1, mload(0x3da0), f_q))
mstore(0x54a0, mulmod(1, mload(0xf00), f_q))
mstore(0x54c0, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x54e0, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x5500, mload(0x5460))
success := and(eq(staticcall(gas(), 0x7, 0x54c0, 0x60, 0x54c0, 0x40), 1), success)
mstore(0x5520, mload(0x54c0))
                    mstore(0x5540, mload(0x54e0))
mstore(0x5560, mload(0x5a0))
                    mstore(0x5580, mload(0x5c0))
success := and(eq(staticcall(gas(), 0x6, 0x5520, 0x80, 0x5520, 0x40), 1), success)
mstore(0x55a0, mload(0x5e0))
                    mstore(0x55c0, mload(0x600))
mstore(0x55e0, mload(0x4680))
success := and(eq(staticcall(gas(), 0x7, 0x55a0, 0x60, 0x55a0, 0x40), 1), success)
mstore(0x5600, mload(0x5520))
                    mstore(0x5620, mload(0x5540))
mstore(0x5640, mload(0x55a0))
                    mstore(0x5660, mload(0x55c0))
success := and(eq(staticcall(gas(), 0x6, 0x5600, 0x80, 0x5600, 0x40), 1), success)
mstore(0x5680, mload(0x620))
                    mstore(0x56a0, mload(0x640))
mstore(0x56c0, mload(0x4fa0))
success := and(eq(staticcall(gas(), 0x7, 0x5680, 0x60, 0x5680, 0x40), 1), success)
mstore(0x56e0, mload(0x5600))
                    mstore(0x5700, mload(0x5620))
mstore(0x5720, mload(0x5680))
                    mstore(0x5740, mload(0x56a0))
success := and(eq(staticcall(gas(), 0x6, 0x56e0, 0x80, 0x56e0, 0x40), 1), success)
mstore(0x5760, mload(0x6c0))
                    mstore(0x5780, mload(0x6e0))
mstore(0x57a0, mload(0x4fc0))
success := and(eq(staticcall(gas(), 0x7, 0x5760, 0x60, 0x5760, 0x40), 1), success)
mstore(0x57c0, mload(0x56e0))
                    mstore(0x57e0, mload(0x5700))
mstore(0x5800, mload(0x5760))
                    mstore(0x5820, mload(0x5780))
success := and(eq(staticcall(gas(), 0x6, 0x57c0, 0x80, 0x57c0, 0x40), 1), success)
mstore(0x5840, 0x11f5977d3237e308a04cdf572abdb224073d168982a1be3c5e3b17066848f0d0)
                    mstore(0x5860, 0x220c0ec0305af0bd0a3eb90452df41f23959cc90d265c20568a037a6f3ce7ef3)
mstore(0x5880, mload(0x4fe0))
success := and(eq(staticcall(gas(), 0x7, 0x5840, 0x60, 0x5840, 0x40), 1), success)
mstore(0x58a0, mload(0x57c0))
                    mstore(0x58c0, mload(0x57e0))
mstore(0x58e0, mload(0x5840))
                    mstore(0x5900, mload(0x5860))
success := and(eq(staticcall(gas(), 0x6, 0x58a0, 0x80, 0x58a0, 0x40), 1), success)
mstore(0x5920, 0x0fb05ccb81603592ce60bd6199890470ef6f9caca3c17570df7701d70a2dd957)
                    mstore(0x5940, 0x1cc1301d6d462edf2e79083532a337ef3f087fbf0b9516d08074784017e10c7e)
mstore(0x5960, mload(0x5000))
success := and(eq(staticcall(gas(), 0x7, 0x5920, 0x60, 0x5920, 0x40), 1), success)
mstore(0x5980, mload(0x58a0))
                    mstore(0x59a0, mload(0x58c0))
mstore(0x59c0, mload(0x5920))
                    mstore(0x59e0, mload(0x5940))
success := and(eq(staticcall(gas(), 0x6, 0x5980, 0x80, 0x5980, 0x40), 1), success)
mstore(0x5a00, 0x08b334d3cf12db286c835345a2502057d603b085018f86efde773cca9eea2824)
                    mstore(0x5a20, 0x045d6071d642c2232681c40c24d63ec3137316346dc1076d0966a4870ed4e424)
mstore(0x5a40, mload(0x5020))
success := and(eq(staticcall(gas(), 0x7, 0x5a00, 0x60, 0x5a00, 0x40), 1), success)
mstore(0x5a60, mload(0x5980))
                    mstore(0x5a80, mload(0x59a0))
mstore(0x5aa0, mload(0x5a00))
                    mstore(0x5ac0, mload(0x5a20))
success := and(eq(staticcall(gas(), 0x6, 0x5a60, 0x80, 0x5a60, 0x40), 1), success)
mstore(0x5ae0, 0x1492ba329703251c89437b03ea660b176ee7b3ab1b46059d52b46b3c4b98dc69)
                    mstore(0x5b00, 0x1a3d247f9a1c2443fb7bc0a22bd4e05fda1582284ac0226a49f5220513209a5a)
mstore(0x5b20, mload(0x5040))
success := and(eq(staticcall(gas(), 0x7, 0x5ae0, 0x60, 0x5ae0, 0x40), 1), success)
mstore(0x5b40, mload(0x5a60))
                    mstore(0x5b60, mload(0x5a80))
mstore(0x5b80, mload(0x5ae0))
                    mstore(0x5ba0, mload(0x5b00))
success := and(eq(staticcall(gas(), 0x6, 0x5b40, 0x80, 0x5b40, 0x40), 1), success)
mstore(0x5bc0, 0x1e1595e086df41bde912514b87ec6b7110aded7d1e309ee091676c30d63408b3)
                    mstore(0x5be0, 0x02d9c5bca0ad7f65bcf86ab8270b2f0c1dea9188842bdccbecf2068b4626ef0e)
mstore(0x5c00, mload(0x5060))
success := and(eq(staticcall(gas(), 0x7, 0x5bc0, 0x60, 0x5bc0, 0x40), 1), success)
mstore(0x5c20, mload(0x5b40))
                    mstore(0x5c40, mload(0x5b60))
mstore(0x5c60, mload(0x5bc0))
                    mstore(0x5c80, mload(0x5be0))
success := and(eq(staticcall(gas(), 0x6, 0x5c20, 0x80, 0x5c20, 0x40), 1), success)
mstore(0x5ca0, 0x2b1ca3ebfb3a1943f45205bf328b08ada8c3d1862278e4fa1cde893c4e739495)
                    mstore(0x5cc0, 0x132c912c368f3a2a3c29d41fbdec522f0cdce5bad16f2902aee57242e2aeb9b0)
mstore(0x5ce0, mload(0x5080))
success := and(eq(staticcall(gas(), 0x7, 0x5ca0, 0x60, 0x5ca0, 0x40), 1), success)
mstore(0x5d00, mload(0x5c20))
                    mstore(0x5d20, mload(0x5c40))
mstore(0x5d40, mload(0x5ca0))
                    mstore(0x5d60, mload(0x5cc0))
success := and(eq(staticcall(gas(), 0x6, 0x5d00, 0x80, 0x5d00, 0x40), 1), success)
mstore(0x5d80, 0x2fe4444f7a416dc4ebd87f9b4fc5b41bf8a4da4f626e70859c2b472356f886a4)
                    mstore(0x5da0, 0x1f79c8d681ee1a48631f2e2bc8c6a75418bcfec82c05a3f8dca092582cd3c3d2)
mstore(0x5dc0, mload(0x50a0))
success := and(eq(staticcall(gas(), 0x7, 0x5d80, 0x60, 0x5d80, 0x40), 1), success)
mstore(0x5de0, mload(0x5d00))
                    mstore(0x5e00, mload(0x5d20))
mstore(0x5e20, mload(0x5d80))
                    mstore(0x5e40, mload(0x5da0))
success := and(eq(staticcall(gas(), 0x6, 0x5de0, 0x80, 0x5de0, 0x40), 1), success)
mstore(0x5e60, 0x0b065c036f3ce87d9d9d7757d36c3782350706fd31b1536f036046ba3ceb8caf)
                    mstore(0x5e80, 0x230b06c65b1362099c939430f22f119f1d87eb8319f8e827410d7999fb1504aa)
mstore(0x5ea0, mload(0x50c0))
success := and(eq(staticcall(gas(), 0x7, 0x5e60, 0x60, 0x5e60, 0x40), 1), success)
mstore(0x5ec0, mload(0x5de0))
                    mstore(0x5ee0, mload(0x5e00))
mstore(0x5f00, mload(0x5e60))
                    mstore(0x5f20, mload(0x5e80))
success := and(eq(staticcall(gas(), 0x6, 0x5ec0, 0x80, 0x5ec0, 0x40), 1), success)
mstore(0x5f40, 0x2a551af8d4bc73445a34a553e3b9a1ab0d565df2a264f9652bbc791b4e9b62d3)
                    mstore(0x5f60, 0x03bcbc6f1da568d904a34c90a25a52bb5981336ba7b46c67ec15d4ba18c9b7a4)
mstore(0x5f80, mload(0x50e0))
success := and(eq(staticcall(gas(), 0x7, 0x5f40, 0x60, 0x5f40, 0x40), 1), success)
mstore(0x5fa0, mload(0x5ec0))
                    mstore(0x5fc0, mload(0x5ee0))
mstore(0x5fe0, mload(0x5f40))
                    mstore(0x6000, mload(0x5f60))
success := and(eq(staticcall(gas(), 0x6, 0x5fa0, 0x80, 0x5fa0, 0x40), 1), success)
mstore(0x6020, mload(0x920))
                    mstore(0x6040, mload(0x940))
mstore(0x6060, mload(0x5100))
success := and(eq(staticcall(gas(), 0x7, 0x6020, 0x60, 0x6020, 0x40), 1), success)
mstore(0x6080, mload(0x5fa0))
                    mstore(0x60a0, mload(0x5fc0))
mstore(0x60c0, mload(0x6020))
                    mstore(0x60e0, mload(0x6040))
success := and(eq(staticcall(gas(), 0x6, 0x6080, 0x80, 0x6080, 0x40), 1), success)
mstore(0x6100, mload(0x960))
                    mstore(0x6120, mload(0x980))
mstore(0x6140, mload(0x5120))
success := and(eq(staticcall(gas(), 0x7, 0x6100, 0x60, 0x6100, 0x40), 1), success)
mstore(0x6160, mload(0x6080))
                    mstore(0x6180, mload(0x60a0))
mstore(0x61a0, mload(0x6100))
                    mstore(0x61c0, mload(0x6120))
success := and(eq(staticcall(gas(), 0x6, 0x6160, 0x80, 0x6160, 0x40), 1), success)
mstore(0x61e0, mload(0x9a0))
                    mstore(0x6200, mload(0x9c0))
mstore(0x6220, mload(0x5140))
success := and(eq(staticcall(gas(), 0x7, 0x61e0, 0x60, 0x61e0, 0x40), 1), success)
mstore(0x6240, mload(0x6160))
                    mstore(0x6260, mload(0x6180))
mstore(0x6280, mload(0x61e0))
                    mstore(0x62a0, mload(0x6200))
success := and(eq(staticcall(gas(), 0x6, 0x6240, 0x80, 0x6240, 0x40), 1), success)
mstore(0x62c0, mload(0x9e0))
                    mstore(0x62e0, mload(0xa00))
mstore(0x6300, mload(0x5160))
success := and(eq(staticcall(gas(), 0x7, 0x62c0, 0x60, 0x62c0, 0x40), 1), success)
mstore(0x6320, mload(0x6240))
                    mstore(0x6340, mload(0x6260))
mstore(0x6360, mload(0x62c0))
                    mstore(0x6380, mload(0x62e0))
success := and(eq(staticcall(gas(), 0x6, 0x6320, 0x80, 0x6320, 0x40), 1), success)
mstore(0x63a0, mload(0x880))
                    mstore(0x63c0, mload(0x8a0))
mstore(0x63e0, mload(0x5180))
success := and(eq(staticcall(gas(), 0x7, 0x63a0, 0x60, 0x63a0, 0x40), 1), success)
mstore(0x6400, mload(0x6320))
                    mstore(0x6420, mload(0x6340))
mstore(0x6440, mload(0x63a0))
                    mstore(0x6460, mload(0x63c0))
success := and(eq(staticcall(gas(), 0x6, 0x6400, 0x80, 0x6400, 0x40), 1), success)
mstore(0x6480, mload(0x7c0))
                    mstore(0x64a0, mload(0x7e0))
mstore(0x64c0, mload(0x5280))
success := and(eq(staticcall(gas(), 0x7, 0x6480, 0x60, 0x6480, 0x40), 1), success)
mstore(0x64e0, mload(0x6400))
                    mstore(0x6500, mload(0x6420))
mstore(0x6520, mload(0x6480))
                    mstore(0x6540, mload(0x64a0))
success := and(eq(staticcall(gas(), 0x6, 0x64e0, 0x80, 0x64e0, 0x40), 1), success)
mstore(0x6560, mload(0x800))
                    mstore(0x6580, mload(0x820))
mstore(0x65a0, mload(0x5420))
success := and(eq(staticcall(gas(), 0x7, 0x6560, 0x60, 0x6560, 0x40), 1), success)
mstore(0x65c0, mload(0x64e0))
                    mstore(0x65e0, mload(0x6500))
mstore(0x6600, mload(0x6560))
                    mstore(0x6620, mload(0x6580))
success := and(eq(staticcall(gas(), 0x6, 0x65c0, 0x80, 0x65c0, 0x40), 1), success)
mstore(0x6640, mload(0x840))
                    mstore(0x6660, mload(0x860))
mstore(0x6680, mload(0x5440))
success := and(eq(staticcall(gas(), 0x7, 0x6640, 0x60, 0x6640, 0x40), 1), success)
mstore(0x66a0, mload(0x65c0))
                    mstore(0x66c0, mload(0x65e0))
mstore(0x66e0, mload(0x6640))
                    mstore(0x6700, mload(0x6660))
success := and(eq(staticcall(gas(), 0x6, 0x66a0, 0x80, 0x66a0, 0x40), 1), success)
mstore(0x6720, mload(0xea0))
                    mstore(0x6740, mload(0xec0))
mstore(0x6760, sub(f_q, mload(0x5480)))
success := and(eq(staticcall(gas(), 0x7, 0x6720, 0x60, 0x6720, 0x40), 1), success)
mstore(0x6780, mload(0x66a0))
                    mstore(0x67a0, mload(0x66c0))
mstore(0x67c0, mload(0x6720))
                    mstore(0x67e0, mload(0x6740))
success := and(eq(staticcall(gas(), 0x6, 0x6780, 0x80, 0x6780, 0x40), 1), success)
mstore(0x6800, mload(0xf40))
                    mstore(0x6820, mload(0xf60))
mstore(0x6840, mload(0x54a0))
success := and(eq(staticcall(gas(), 0x7, 0x6800, 0x60, 0x6800, 0x40), 1), success)
mstore(0x6860, mload(0x6780))
                    mstore(0x6880, mload(0x67a0))
mstore(0x68a0, mload(0x6800))
                    mstore(0x68c0, mload(0x6820))
success := and(eq(staticcall(gas(), 0x6, 0x6860, 0x80, 0x6860, 0x40), 1), success)
mstore(0x68e0, mload(0x6860))
                    mstore(0x6900, mload(0x6880))
mstore(0x6920, mload(0xf40))
                    mstore(0x6940, mload(0xf60))
mstore(0x6960, mload(0xf80))
                    mstore(0x6980, mload(0xfa0))
mstore(0x69a0, mload(0xfc0))
                    mstore(0x69c0, mload(0xfe0))
mstore(0x69e0, keccak256(0x68e0, 256))
mstore(27136, mod(mload(27104), f_q))
mstore(0x6a20, mulmod(mload(0x6a00), mload(0x6a00), f_q))
mstore(0x6a40, mulmod(1, mload(0x6a00), f_q))
mstore(0x6a60, mload(0x6960))
                    mstore(0x6a80, mload(0x6980))
mstore(0x6aa0, mload(0x6a40))
success := and(eq(staticcall(gas(), 0x7, 0x6a60, 0x60, 0x6a60, 0x40), 1), success)
mstore(0x6ac0, mload(0x68e0))
                    mstore(0x6ae0, mload(0x6900))
mstore(0x6b00, mload(0x6a60))
                    mstore(0x6b20, mload(0x6a80))
success := and(eq(staticcall(gas(), 0x6, 0x6ac0, 0x80, 0x6ac0, 0x40), 1), success)
mstore(0x6b40, mload(0x69a0))
                    mstore(0x6b60, mload(0x69c0))
mstore(0x6b80, mload(0x6a40))
success := and(eq(staticcall(gas(), 0x7, 0x6b40, 0x60, 0x6b40, 0x40), 1), success)
mstore(0x6ba0, mload(0x6920))
                    mstore(0x6bc0, mload(0x6940))
mstore(0x6be0, mload(0x6b40))
                    mstore(0x6c00, mload(0x6b60))
success := and(eq(staticcall(gas(), 0x6, 0x6ba0, 0x80, 0x6ba0, 0x40), 1), success)
mstore(0x6c20, mload(0x6ac0))
                    mstore(0x6c40, mload(0x6ae0))
mstore(0x6c60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x6c80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x6ca0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x6cc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x6ce0, mload(0x6ba0))
                    mstore(0x6d00, mload(0x6bc0))
mstore(0x6d20, 0x186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac)
            mstore(0x6d40, 0x17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d2)
            mstore(0x6d60, 0x06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753)
            mstore(0x6d80, 0x06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a)
success := and(eq(staticcall(gas(), 0x8, 0x6c20, 0x180, 0x6c20, 0x20), 1), success)
success := and(eq(mload(0x6c20), 1), success)

            if not(success) { revert(0, 0) }
            return(0, 0)

                }
            }
        }